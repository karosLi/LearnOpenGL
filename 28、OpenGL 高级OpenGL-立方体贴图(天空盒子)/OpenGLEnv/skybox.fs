#version 330 core
/**
 立方体贴图
 
 将多个纹理组合起来映射到一张纹理上的一种纹理类型：立方体贴图(Cube Map)。

 简单来说，立方体贴图就是一个包含了6个2D纹理的纹理，每个2D纹理都组成了立方体的一个面：一个有纹理的立方体。你可能会奇怪，这样一个立方体有什么用途呢？为什么要把6张纹理合并到一张纹理中，而不是直接使用6个单独的纹理呢？立方体贴图有一个非常有用的特性，它可以通过一个方向向量来进行索引/采样。
 
 假设我们有一个1x1x1的单位立方体，方向向量的原点位于它的中心。使用一个橘黄色的方向向量来从立方体贴图上采样一个纹理值会像是这样：
 https://learnopengl-cn.github.io/img/04/06/cubemaps_sampling.png
 
 立方体贴图和坐标
 https://learnopengl-cn.github.io/img/04/06/cubemaps_skybox.png
 https://uploads.disquscdn.com/images/9b7d61c918b21a102f8ec2115c008a23be3c79a893ef5917910f5906b3a30fb3.png?w=800&h=384
 
 
 
 重点：
 方向向量的大小并不重要，只要提供了方向，OpenGL就会获取方向向量（最终）所击中的纹素，并返回对应的采样纹理值。所以即使天空盒子的大小不影响立方体贴图的采样值
 
 
 如果我们假设将这样的立方体贴图应用到一个立方体上，采样立方体贴图所使用的方向向量将和立方体（插值的）顶点位置非常相像。这样子，只要立方体的中心位于原点，我们就能使用立方体的实际位置向量来对立方体贴图进行采样了。接下来，我们可以将所有顶点的纹理坐标当做是立方体的顶点位置。最终得到的结果就是可以访问立方体贴图上正确面(Face)纹理的一个纹理坐标。
 
 当立方体处于原点(0, 0, 0)时，它的每一个位置向量都是从原点出发的方向向量。这个方向向量正是获取立方体上特定位置的纹理值所需要的。正是因为这个，我们只需要提供位置向量而不用纹理坐标了。
 
 
 https://learnopengl-cn.github.io/04%20Advanced%20OpenGL/06%20Cubemaps/
 */

out vec4 FragColor;

in vec3 TexCoords;// 代表3D纹理坐标的方向向量，来自于顶点着色器中的变换之前的顶点位置


uniform samplerCube skybox;// 立方体贴图的纹理采样器

void main()
{
    FragColor = texture(skybox, TexCoords);
}
