#version 330 core
/**
 完整的延迟着色法：
 1、延迟渲染阶段（几何处理阶段+延迟光照处理阶段）
 2、混合处理阶段
 
 比如：
 1、先绘制场景人物（几何处理阶段+延迟光照处理阶段）
 2、再绘制光照源（混合处理阶段）
 

 延迟着色法的其中一个缺点就是它不能进行混合(Blending)，因为G缓冲中所有的数据都是从一个单独的片段中来的，而混合需要对多个片段的组合进行操作。延迟着色法另外一个缺点就是它迫使你对大部分场景的光照使用相同的光照算法，你可以通过包含更多关于材质的数据到G缓冲中来减轻这一缺点。
 
 为了克服这些缺点(特别是混合)，我们通常分割我们的渲染器为两个部分：一个是延迟渲染的部分，另一个是专门为了混合或者其他不适合延迟渲染管线的着色器效果而设计的的正向渲染的部分。为了展示这是如何工作的，我们将会使用正向渲染器渲染光源为一个小立方体，因为光照立方体会需要一个特殊的着色器(会输出一个光照颜色)。
 
 结合延迟渲染与正向渲染
 
 */
layout (location = 0) out vec4 FragColor;

uniform vec3 lightColor;

void main()
{
    FragColor = vec4(lightColor, 1.0);
}
